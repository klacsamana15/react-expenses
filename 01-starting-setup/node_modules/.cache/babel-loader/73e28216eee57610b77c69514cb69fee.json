{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\klacs\\\\Downloads\\\\01-starting-setup\\\\01-starting-setup\\\\src\\\\components\\\\Expenses\\\\Expenses.js\",\n    _s = $RefreshSig$();\n\nimport ExpensesList from \"./ExpensesList\";\nimport Card from \"../UI/Card\";\nimport \"./Expenses.css\";\nimport React, { useState } from \"react\";\nimport ExpensesFilter from \"./ExpensesFilter\";\nimport ExpensesChart from './ExpensesChart';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Expenses = props => {\n  _s();\n\n  //function Expenses(props) {\n  const [filteredYear, setFilteredYear] = useState('2020');\n\n  const filterChangeHandler = selectedYear => {\n    //set new value to the year that was selected\n    setFilteredYear(selectedYear); //display output change in expenses.js\n    //console.log(selectedYear);\n    //console.log('Expenses.js');\n  }; //filtering array of expenses, \n  //returns a brand new array that we either keep or remove items from array\n  //the function that is being passed:\n  //i wanna check if a given expense has a date (expense.date) that matches the filteredYear\n  //will return true or false\n\n\n  const filteredExpenses = props.items.filter(expense => {\n    return expense.date.getFullYear().toString() === filteredYear;\n  }); // let expensesContent = <p>No expenses found.</p>;\n  // if(filteredExpenses.length > 0) {\n  //   expensesContent = filteredExpenses.map(expense => \n  //     <ExpenseItem \n  //     key={expense.id}\n  //     title={expense.title} \n  //     amount={expense.amount}\n  //     date={expense.date}/>\n  //     )\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      className: \"expenses\",\n      children: [/*#__PURE__*/_jsxDEV(ExpensesFilter //default value chosen: filtered year: 2020\n      , {\n        default: filteredYear,\n        onChangeFilter: filterChangeHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ExpensesChart, {\n        expenses: filteredExpenses\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ExpensesList, {\n        items: filteredExpenses\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Expenses, \"d6AxVjxjRbYO2YFEia8LjUybrDc=\");\n\n_c = Expenses;\nexport default Expenses;\n\nvar _c;\n\n$RefreshReg$(_c, \"Expenses\");","map":{"version":3,"sources":["C:/Users/klacs/Downloads/01-starting-setup/01-starting-setup/src/components/Expenses/Expenses.js"],"names":["ExpensesList","Card","React","useState","ExpensesFilter","ExpensesChart","Expenses","props","filteredYear","setFilteredYear","filterChangeHandler","selectedYear","filteredExpenses","items","filter","expense","date","getFullYear","toString"],"mappings":";;;AAAA,OAAOA,YAAP,MAAyB,gBAAzB;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAO,gBAAP;AACA,OAAOC,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAAA;;AAC1B;AACF,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCN,QAAQ,CAAC,MAAD,CAAhD;;AAEA,QAAMO,mBAAmB,GAAGC,YAAY,IAAI;AAC1C;AACAF,IAAAA,eAAe,CAACE,YAAD,CAAf,CAF0C,CAG1C;AACA;AACA;AACD,GAND,CAJ4B,CAY5B;AACA;AACA;AACA;AACA;;;AACA,QAAMC,gBAAgB,GAAGL,KAAK,CAACM,KAAN,CAAYC,MAAZ,CAAmBC,OAAO,IAAI;AACrD,WAAOA,OAAO,CAACC,IAAR,CAAaC,WAAb,GAA2BC,QAA3B,OAA0CV,YAAjD;AACD,GAFwB,CAAzB,CAjB4B,CAqB5B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE,sBACE;AAAA,2BACE,QAAC,IAAD;AAAM,MAAA,SAAS,EAAC,UAAhB;AAAA,8BACE,QAAC,cAAD,CACA;AADA;AAEA,QAAA,OAAO,EAAEA,YAFT;AAGA,QAAA,cAAc,EAAEE;AAHhB;AAAA;AAAA;AAAA;AAAA,cADF,eAKE,QAAC,aAAD;AAAe,QAAA,QAAQ,EAAEE;AAAzB;AAAA;AAAA;AAAA;AAAA,cALF,eAME,QAAC,YAAD;AAAc,QAAA,KAAK,EAAIA;AAAvB;AAAA;AAAA;AAAA;AAAA,cANF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAmDD,CApFD;;GAAMN,Q;;KAAAA,Q;AAsFN,eAAeA,QAAf","sourcesContent":["import ExpensesList from \"./ExpensesList\";\r\nimport Card from \"../UI/Card\";\r\nimport \"./Expenses.css\";\r\nimport React, {useState} from \"react\";\r\nimport ExpensesFilter from \"./ExpensesFilter\";\r\nimport ExpensesChart from './ExpensesChart';\r\n\r\nconst Expenses = (props) => {\r\n  //function Expenses(props) {\r\nconst [filteredYear, setFilteredYear] = useState('2020');\r\n\r\nconst filterChangeHandler = selectedYear => {\r\n  //set new value to the year that was selected\r\n  setFilteredYear(selectedYear);\r\n  //display output change in expenses.js\r\n  //console.log(selectedYear);\r\n  //console.log('Expenses.js');\r\n};\r\n\r\n//filtering array of expenses, \r\n//returns a brand new array that we either keep or remove items from array\r\n//the function that is being passed:\r\n//i wanna check if a given expense has a date (expense.date) that matches the filteredYear\r\n//will return true or false\r\nconst filteredExpenses = props.items.filter(expense => {\r\n  return expense.date.getFullYear().toString() === filteredYear;\r\n});\r\n\r\n// let expensesContent = <p>No expenses found.</p>;\r\n\r\n// if(filteredExpenses.length > 0) {\r\n//   expensesContent = filteredExpenses.map(expense => \r\n//     <ExpenseItem \r\n//     key={expense.id}\r\n//     title={expense.title} \r\n//     amount={expense.amount}\r\n//     date={expense.date}/>\r\n//     )\r\n// }\r\n\r\n  return (\r\n    <div>\r\n      <Card className=\"expenses\">\r\n        <ExpensesFilter\r\n        //default value chosen: filtered year: 2020\r\n        default={filteredYear} \r\n        onChangeFilter={filterChangeHandler}/>\r\n        <ExpensesChart expenses={filteredExpenses}/>\r\n        <ExpensesList items = {filteredExpenses}/>\r\n        \r\n        {/* {filteredExpenses.length === 0 && <p>No expenses found.</p>}\r\n        {filteredExpenses.length > 0 &&  */}\r\n        {/* // using props.items that is technically the array of expenses in app.js\r\n        // using map to transform our array of objects into array of jsx element\r\n        // i want to map every expense in my array of expenses into an ExpenseItem jsx element \r\n        // {props.items.map(expense => \r\n        filteredExpenses.map(expense => \r\n        <ExpenseItem \r\n        //should always add a key whenever mapping out a list of items\r\n        //if we dont have one, use indexes but not advisable\r\n        //keys are important because behind the scenes, \r\n        //react doesnt know how to identify what is what\r\n        key={expense.id}\r\n        title={expense.title} \r\n        amount={expense.amount}\r\n        date={expense.date}/>\r\n        ))} */}\r\n        \r\n        {/* <ExpenseItem\r\n          title={props.items[0].title}\r\n          amount={props.items[0].amount}\r\n          date={props.items[0].date}\r\n        />\r\n        <ExpenseItem\r\n          title={props.items[1].title}\r\n          amount={props.items[1].amount}\r\n          date={props.items[1].date}\r\n        />\r\n        <ExpenseItem\r\n          title={props.items[2].title}\r\n          amount={props.items[2].amount}\r\n          date={props.items[2].date}\r\n        />\r\n        <ExpenseItem\r\n          title={props.items[3].title}\r\n          amount={props.items[3].amount}\r\n          date={props.items[3].date}\r\n        /> */}\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Expenses;\r\n"]},"metadata":{},"sourceType":"module"}