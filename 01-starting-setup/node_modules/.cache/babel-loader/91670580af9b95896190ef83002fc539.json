{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\klacs\\\\Downloads\\\\01-starting-setup\\\\01-starting-setup\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\n//import ExpenseItem from \"./components/ExpenseItem\";\nimport Expenses from './components/Expenses/Expenses';\nimport React, { useState } from 'react';\nimport NewExpense from './components/NewExpense/NewExpense';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst dummyExpenses = [//const expenses = [\n{\n  id: \"e1\",\n  title: \"Toilet Paper\",\n  amount: 94.12,\n  date: new Date(2020, 7, 14)\n}, {\n  id: \"e2\",\n  title: \"New TV\",\n  amount: 799.49,\n  date: new Date(2021, 2, 12)\n}, {\n  id: \"e3\",\n  title: \"Car Insurance\",\n  amount: 294.67,\n  date: new Date(2021, 2, 28)\n}, {\n  id: \"e4\",\n  title: \"New Desk (Wooden)\",\n  amount: 450,\n  date: new Date(2021, 5, 12)\n}];\n\nconst App = () => {\n  _s();\n\n  //function App() {\n  //using the following useState to use the hard-coded data\n  //and to be able to add new data (add new expenses)\n  const [expenses, setExpenses] = useState(dummyExpenses);\n\n  const addExpenseHandler = expense => {\n    // console.log('In App.js');\n    // console.log(expense);\n    // creating a new array: passing expense first which is the new data\n    // passing ...expenses second which is the existing data(dummyExpenses)\n    // this will create a new array of expenses (new data + dummyExpenses)\n    //** remember if you update your state DEPENDING on your previous state\n    // we should be using a special function\n    //setExpenses([expense, ...expenses]);\n    setExpenses;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(NewExpense, {\n      onAddExpense: addExpenseHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Expenses, {\n      items: expenses\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"TPmORV73ptUIvea8V+FQF+Og24g=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/klacs/Downloads/01-starting-setup/01-starting-setup/src/App.js"],"names":["Expenses","React","useState","NewExpense","dummyExpenses","id","title","amount","date","Date","App","expenses","setExpenses","addExpenseHandler","expense"],"mappings":";;;AAAA;AACA,OAAOA,QAAP,MAAqB,gCAArB;AACA,OAAOC,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,UAAP,MAAuB,oCAAvB;;AAGE,MAAMC,aAAa,GAAG,CACtB;AACE;AACEC,EAAAA,EAAE,EAAE,IADN;AAEEC,EAAAA,KAAK,EAAE,cAFT;AAGEC,EAAAA,MAAM,EAAE,KAHV;AAIEC,EAAAA,IAAI,EAAE,IAAIC,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,EAAlB;AAJR,CAFoB,EAQpB;AAAEJ,EAAAA,EAAE,EAAE,IAAN;AAAYC,EAAAA,KAAK,EAAE,QAAnB;AAA6BC,EAAAA,MAAM,EAAE,MAArC;AAA6CC,EAAAA,IAAI,EAAE,IAAIC,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,EAAlB;AAAnD,CARoB,EASpB;AACEJ,EAAAA,EAAE,EAAE,IADN;AAEEC,EAAAA,KAAK,EAAE,eAFT;AAGEC,EAAAA,MAAM,EAAE,MAHV;AAIEC,EAAAA,IAAI,EAAE,IAAIC,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,EAAlB;AAJR,CAToB,EAepB;AACEJ,EAAAA,EAAE,EAAE,IADN;AAEEC,EAAAA,KAAK,EAAE,mBAFT;AAGEC,EAAAA,MAAM,EAAE,GAHV;AAIEC,EAAAA,IAAI,EAAE,IAAIC,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,EAAlB;AAJR,CAfoB,CAAtB;;AAuBF,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB;AAEA;AACA;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAACE,aAAD,CAAxC;;AAEA,QAAMS,iBAAiB,GAAGC,OAAO,IAAI;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAF,IAAAA,WAAW;AACZ,GAVD;;AAYA,sBACE;AAAA,4BACE,QAAC,UAAD;AAAY,MAAA,YAAY,EAAEC;AAA1B;AAAA;AAAA;AAAA;AAAA,YADF,eAIE,QAAC,QAAD;AAAU,MAAA,KAAK,EAAEF;AAAjB;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA6BD,CAhDD;;GAAMD,G;;KAAAA,G;AAkDN,eAAeA,GAAf","sourcesContent":["//import ExpenseItem from \"./components/ExpenseItem\";\nimport Expenses from './components/Expenses/Expenses';\nimport React, {useState} from 'react';\nimport NewExpense from './components/NewExpense/NewExpense';\n\n\n  const dummyExpenses = [\n  //const expenses = [\n    {\n      id: \"e1\",\n      title: \"Toilet Paper\",\n      amount: 94.12,\n      date: new Date(2020, 7, 14),\n    },\n    { id: \"e2\", title: \"New TV\", amount: 799.49, date: new Date(2021, 2, 12) },\n    {\n      id: \"e3\",\n      title: \"Car Insurance\",\n      amount: 294.67,\n      date: new Date(2021, 2, 28),\n    },\n    {\n      id: \"e4\",\n      title: \"New Desk (Wooden)\",\n      amount: 450,\n      date: new Date(2021, 5, 12),\n    },\n  ];\n\nconst App = () => {\n  //function App() {\n  \n  //using the following useState to use the hard-coded data\n  //and to be able to add new data (add new expenses)\n  const [expenses, setExpenses] = useState(dummyExpenses);\n\n  const addExpenseHandler = expense => {\n    // console.log('In App.js');\n    // console.log(expense);\n    // creating a new array: passing expense first which is the new data\n    // passing ...expenses second which is the existing data(dummyExpenses)\n    // this will create a new array of expenses (new data + dummyExpenses)\n    //** remember if you update your state DEPENDING on your previous state\n    // we should be using a special function\n    //setExpenses([expense, ...expenses]);\n    setExpenses\n  };\n\n  return (\n    <div>\n      <NewExpense onAddExpense={addExpenseHandler}/>\n      {/* pass expenses array down by a props\n      passing the items props which points to expenses array */}\n      <Expenses items={expenses}/>\n      {/* <ExpenseItem\n        title={expenses[0].title}\n        amount={expenses[0].amount}\n        date={expenses[0].date}\n      />\n      <ExpenseItem\n        title={expenses[1].title}\n        amount={expenses[1].amount}\n        date={expenses[1].date}\n      />\n      <ExpenseItem\n        title={expenses[2].title}\n        amount={expenses[2].amount}\n        date={expenses[2].date}\n      />\n       <ExpenseItem\n        title={expenses[3].title}\n        amount={expenses[3].amount}\n        date={expenses[3].date}\n      />\n       */}\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}